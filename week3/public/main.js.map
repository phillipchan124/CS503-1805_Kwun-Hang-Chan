{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routes.ts","webpack:///./src/app/components/editor/editor.component.css","webpack:///./src/app/components/editor/editor.component.html","webpack:///./src/app/components/editor/editor.component.ts","webpack:///./src/app/components/new-problem/new-problem.component.css","webpack:///./src/app/components/new-problem/new-problem.component.html","webpack:///./src/app/components/new-problem/new-problem.component.ts","webpack:///./src/app/components/problem-detail/problem-detail.component.css","webpack:///./src/app/components/problem-detail/problem-detail.component.html","webpack:///./src/app/components/problem-detail/problem-detail.component.ts","webpack:///./src/app/components/problem-list/problem-list.component.css","webpack:///./src/app/components/problem-list/problem-list.component.html","webpack:///./src/app/components/problem-list/problem-list.component.ts","webpack:///./src/app/services/collaboration.service.ts","webpack:///./src/app/services/data.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<router-outlet></router-outlet>\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'oj-client';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { ProblemListComponent } from './components/problem-list/problem-list.component';\nimport { ProblemDetailComponent } from './components/problem-detail/problem-detail.component';\n\nimport { routing } from './app.routes';\nimport { NewProblemComponent } from './components/new-problem/new-problem.component';\nimport { EditorComponent } from './components/editor/editor.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ProblemListComponent,\n    ProblemDetailComponent,\n    NewProblemComponent,\n    EditorComponent\n  ],\n  imports: [\n    BrowserModule,\n    routing,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Routes, RouterModule } from '@angular/router';\nimport { ProblemListComponent } from './components/problem-list/problem-list.component';\nimport { ProblemDetailComponent } from './components/problem-detail/problem-detail.component';\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: 'problems',\n    pathMatch: 'full'\n  }, \n  {\n    path: 'problems',\n    component: ProblemListComponent\n  },\n  {\n    path: 'problems/:id', \n    component: ProblemDetailComponent\n  },\n  {\n    path:'**', \n    redirectTo: 'problems'\n  }\n]\nexport const routing = RouterModule.forRoot(routes);","module.exports = \"@media screen {\\n #editor {\\n   height: 600px;\\n }\\n .lang-select {\\n   width: 100px;\\n   margin-right: 10px;\\n }\\n header .btn {\\n   margin: 0 5px;\\n }\\n footer .btn {\\n   margin: 0 5px;\\n }\\n .editor-footer, .editor-header {\\n   margin: 10px 0;\\n }\\n .cursor {\\n   /*position:absolute;*/\\n   background: rgba(0, 250, 0, 0.5);\\n   z-index: 40;\\n   width: 2px!important\\n } \\n}\"","module.exports = \"<section>\\n  <header class=\\\"editor-header\\\">\\n    <div class=\\\"row\\\">\\n      <select class=\\\"form-control pull-left lang-select\\\" name=\\\"language\\\"\\n        [(ngModel)]=\\\"language\\\" (change)=\\\"setLanguage(language)\\\">\\n      <option *ngFor=\\\"let language of languages\\\" [value]=\\\"language\\\">\\n        {{language}}\\n      </option>\\n      </select>\\n      <!--reset button -->\\n      <!-- Button trigger modal -->\\n      <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" data-toggle=\\\"modal\\\" data-target=\\\"#myModal\\\">\\n        Reset\\n      </button>\\n\\n      <!-- Modal -->\\n      <div class=\\\"modal fade\\\" id=\\\"myModal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"exampleModalLabel\\\" aria-hidden=\\\"true\\\">\\n        <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\n          <div class=\\\"modal-content\\\">\\n            <div class=\\\"modal-header\\\">\\n              <h5 class=\\\"modal-title\\\" id=\\\"exampleModalLabel\\\">Are you sure</h5>\\n              <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\">\\n                <span aria-hidden=\\\"true\\\">&times;</span>\\n              </button>\\n            </div>\\n            <div class=\\\"modal-body\\\">\\n              You will lose current code in the editor, are you sure?\\n            </div>\\n            <div class=\\\"modal-footer\\\">\\n              <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" data-dismiss=\\\"modal\\\">Cancel</button>\\n              <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" data-dismiss=\\\"modal\\\"\\n              (click)=\\\"resetEditor()\\\">Reset</button>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </header>\\n\\n  <div id=\\\"editor\\\"></div><!-- This is the body -->\\n  \\n  <footer class=\\\"editor-footer\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-success pull-right\\\" \\n      (click)=\\\"submit()\\\">Submit Solution</button>\\n  </footer>\\n</section>\"","import { Component, OnInit } from '@angular/core';\nimport { CollaborationService } from '../../services/collaboration.service';\nimport { ActivatedRoute, Params } from '@angular/router';\n\ndeclare var ace: any;\n\n@Component({\n  selector: 'app-editor',\n  templateUrl: './editor.component.html',\n  styleUrls: ['./editor.component.css']\n})\n\nexport class EditorComponent implements OnInit {\n\teditor: any;\n  sessionId: string;\n\n  public languages: string[]  = ['Java', 'Python'];\n  language: string = 'Java'; //default language\n\n\tdefaultContent = {\n\t   'Java': `public class Example {\n                public static void main(String[] args) {\n                   // Type your Java code here\n                }\n              }`,\n     'Python': `class Solution:\n                   def example():\n                   # write your Python code here`\n };//use `` to write multi-line text\n \n constructor(private collaboration: CollaborationService,\n             private route: ActivatedRoute) {}\n\n // ngOnInit() {\n //    // \"editor\" is the id in html\n //    this.editor = ace.edit(\"editor\");\n //    this.editor.setTheme(\"ace/theme/eclipse\");\n //    this.resetEditor();\n //    this.collaboration.init();\n // }\n\n ngOnInit() {\n   // use problem id as session id\n   // since we subscribe the changes, every time the params changes\n   // sessionId will be updated and the editor will be initilized\n   this.route.params.subscribe(\n                params => {\n                       this.sessionId = params['id'];\n                       this.initEditor();\n                });\n }\n\n initEditor(): void {\n   this.editor = ace.edit(\"editor\");\n   this.editor.setTheme(\"ace/theme/eclipse\");\n   this.resetEditor();\n   document.getElementsByTagName('textarea')[0].focus();\n   \n   // set up collaboration socket\n   this.collaboration.init(this.editor, this.sessionId);\n   this.editor.lastAppliedChange = null;\n   // registrer change callback\n   this.editor.on('change', (e) => {\n      console.log('editor changes: ' + JSON.stringify(e));\n\n      // if the change is initiated from the current browser session\n      // then send to the server\n      if (this.editor.lastAppliedChange != e) {\n        this.collaboration.change(JSON.stringify(e));\n      }\n    })\n }\n\n resetEditor(): void {\n    this.editor.getSession().setMode(\"ace/mode/\" + this.language.toLowerCase());\n    this.editor.setValue(this.defaultContent[this.language]);\n }\n\n setLanguage(language: string): void {\n    this.language = language;\n    this.resetEditor();\n }\n submit(): void {\n    let usercode = this.editor.getValue();\n    console.log(usercode);\n }\n}\n","module.exports = \"\"","module.exports = \"<div>\\n  <form #formRef=\\\"ngForm\\\">\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"problemName\\\">Problem Name</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"problemName\\\"\\n        name=\\\"problemName\\\" placeholder=\\\"Input problem name\\\" required\\n        [(ngModel)]=\\\"newProblem.name\\\">\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"problemDesc\\\">Problem Description</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"problemDesc\\\"\\n        name=\\\"problemDesc\\\" placeholder=\\\"Input description\\\" required\\n        [(ngModel)]=\\\"newProblem.desc\\\">\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"difficulty\\\">Difficulty</label>\\n      <select class=\\\"form-control\\\" id=\\\"difficulty\\\" name=\\\"difficulty\\\"\\n        [(ngModel)]=\\\"newProblem.difficulty\\\">\\n        <option *ngFor=\\\"let difficulty of difficulties\\\" [value]=\\\"difficulty\\\">{{difficulty}}\\n        </option>\\n      </select>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-12\\\">\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary pull-right\\\"\\n          (click)=\\\"addProblem()\\\">Add problem</button>\\n      </div>\\n    </div>\\n  </form>\\n</div>\\n<br/>\\n<br/>\"","import { Component, OnInit } from '@angular/core';\nimport { Problem } from '../../models/problem.model';\nimport { DataService } from '../../services/data.service';\n\n//default problem\nconst DEFAULT_PROBLEM: Problem = Object.freeze({\n  id: 0,\n  name: '',\n  desc: '',\n  difficulty: 'easy'\n})\n\n@Component({\n  selector: 'app-new-problem',\n  templateUrl: './new-problem.component.html',\n  styleUrls: ['./new-problem.component.css']\n})\nexport class NewProblemComponent implements OnInit {\n  newProblem: Problem = Object.assign({}, DEFAULT_PROBLEM);\n  difficulties: string[] = ['easy', 'medium', 'hard', 'super'];\n\n  constructor(private dataService: DataService) {}\n\n  ngOnInit() {\n  }\n\n  addProblem() {\n    this.dataService.addProblem(this.newProblem);\n    // assign newProblem a new problem instance\n    // Otherwise newProblem have same reference as the one we added to the list\n    // then when next time add new problem, it will override the problem we have already add into the problem list.\n    this.newProblem = Object.assign({}, DEFAULT_PROBLEM);\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\" *ngIf=\\\"problem\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-sm-12 col-md-4\\\">\\n      <div>\\n        <h2>\\n          {{problem.id}}. {{problem.name}}\\n        </h2>\\n        <p>\\n          {{problem.desc}}\\n        </p>\\n      </div>\\n    </div>\\n    <div class=\\\"hidden-xs col-sm-12 col-md-8\\\">\\n      <app-editor></app-editor>\\n    </div>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { Problem } from '../../models/problem.model';\nimport { DataService } from '../../services/data.service';\n\n@Component({\n  selector: 'app-problem-detail',\n  templateUrl: './problem-detail.component.html',\n  styleUrls: ['./problem-detail.component.css']\n})\nexport class ProblemDetailComponent implements OnInit {\n\tproblem: Problem;\n\n  constructor(private dataService: DataService,\n  \tprivate route: ActivatedRoute) { }\n\n  ngOnInit() {\n  \tthis.route.params.subscribe(params => {\n      // this.problem = this.dataService.getProblem(+params['id']); // + convert '1' to 1 \n\n      // getProblem(id) returns a Promise\n      this.dataService.getProblem(+params['id'])\n        .then(problem => this.problem = problem);\n    })\n  }\n}\n","module.exports = \".difficult {\\n  min-width: 65px;\\n  margin-right: 18px;\\n}\\n.badge.difficulty {\\n  padding-top: 0.6em;\\n  color: #fbfdfa;\\n  font-size: 12px;\\n}\\n.title {\\n  font-size: 1.2em;\\n}\\n.diff-easy {\\n  background-color: #42ebf4;\\n}\\n.diff-medium {\\n  background-color: #92cf5c;\\n}\\n.diff-hard {\\n  background-color: #dd0d1e;\\n}\\n.diff-super{\\n  background-color: #8d16e2;\\n}\"","module.exports = \"<div class=\\\"container\\\">\\n   <app-new-problem></app-new-problem>\\n   <div class=\\\"list-group\\\">\\n     <a class=\\\"list-group-item\\\" *ngFor=\\\"let problem of problems\\\"\\n       [routerLink]=\\\"['/problems', problem.id]\\\">\\n       <span class=\\\"{{'pull-left badge difficulty diff-' + problem.difficulty.toLocaleLowerCase()}}\\\">\\n          {{problem.difficulty}}\\n      </span>\\n        <strong class=\\\"title\\\">{{problem.id}}. {{problem.name}}  </strong>\\n    </a> \\n  </div>\\n</div>\"","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { Problem } from '../../models/problem.model';\nimport { PROBLEMS } from '../../mock-problems';\nimport { DataService } from '../../services/data.service';\n\n@Component({\n  selector: 'app-problem-list',\n  templateUrl: './problem-list.component.html',\n  styleUrls: ['./problem-list.component.css']\n})\nexport class ProblemListComponent implements OnInit {\n\tproblems: Problem[]\n  subscriptionProblems: Subscription;\n\n  constructor(private dataService: DataService) { }\n\n  ngOnInit() {\n  \tthis.getProblem();\n  }\n\n  ngOnDestroy() {\n    this.subscriptionProblems.unsubscribe();\n  }\n\n\n  getProblem() {\n  \t// this.problems = this.dataService.getProblems();\n    this.subscriptionProblems = this.dataService.getProblems()\n        .subscribe(problems => this.problems = problems);\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\ndeclare var io: any; // io is alread imported in .angular.cli.json\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CollaborationService {\n  collaborationSocket: any;\n  constructor() { }\n\n  init(editor: any, sessionId: string): void {\n    // window.location.origin: the server location on the current page\n    // for example, the current page on the browser is \"localhost:3000/problems/1\", the window.location.origin = \"http/localhost:3000\"\n    //this.collaborationSocket = io(window.location.origin, { query: 'message=haha' });\n    \n    // take two parameters\n    this.collaborationSocket = io(window.location.origin, {query:'sessionId=' + sessionId});\n    // wait for 'message' event\n    // when receive the message, for now just print the message\n    // this.collaborationSocket.on(\"message\", (message) => {\n    //   console.log('message received from the server: ' + message);\n    // })\n\n    // when receive change from the server, apply to local browser session\n  \tthis.collaborationSocket.on('change', (delta: string) => {\n  \t\tconsole.log('collaboration: editor changes ' + delta);\n  \t\tdelta = JSON.parse(delta);\n  \t\teditor.lastAppliedChange = delta;\n  \t\teditor.getSession().getDocument().applyDeltas([delta]);\n  \t});\n  }\n\n  // send to server (which will forward to other participants)\n  change(delta: string): void {\n  \tconsole.log('send message' + delta);\n  \tthis.collaborationSocket.emit('change', delta);\n  }\n}\n","import { Injectable } from '@angular/core';\n// import { Problem } from \"../models/problem.model\";\n// import { PROBLEMS } from \"../mock-problems\";\nimport { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { Problem } from \"../models/problem.model\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\t// problems : Problem[] = PROBLEMS;\n  private _problemSource = new BehaviorSubject<Problem[]>([]);\n\n  constructor(private httpClient: HttpClient) { }\n\n  // getProblems() : Problem[] {\n  // \treturn this.problems;\n  // }\n\n  // getProblem(id : number) : Problem {\n  // \treturn this.problems.find( (problem) => problem.id === id);\n  // }\n\n  // addProblem(problem: Problem) {\n  // \tproblem.id = this.problems.length + 1;\n  // \tthis.problems.push(problem);\n  // }\n\n  getProblems(): Observable<Problem[]> {\n    this.httpClient.get('api/v1/problems')\n        .toPromise()\n        .then((res: any) => {\n                // .next:  next data\n                this._problemSource.next(res);})\n        .catch(this.handleError);\n      return this._problemSource.asObservable();\n  }\n\n  getProblem(id: number): Promise<Problem> {\n    return this.httpClient.get(`api/v1/problems/${id}`)\n      .toPromise()\n      .then((res: any) => res) // same as { return res }\n      .catch(this.handleError);\n  }\n\n  addProblem(problem: Problem) {\n      const options = { headers: new HttpHeaders( {'Content-Type': 'application/json'})};\n      return this.httpClient.post('api/v1/problems', problem, options)\n         .toPromise()\n         .then((res: any) => {\n           this.getProblems();\n           return res;\n         })\n         .catch(this.handleError);\n  }\n\n  private handleError(error: any):  Promise<any> {\n    return Promise.reject(error.body || error);\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}